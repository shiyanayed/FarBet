version: '3.8'

services:
  # Main Flask API
  api:
    build: .
    container_name: prediction-market-api
    ports:
      - "5000:5000"
    environment:
      # Server
      FLASK_APP: main.py
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}

      # Database
      DATABASE_URL: postgresql://prediction_user:prediction_pass@db:5432/prediction_market

      # Farcaster
      FARCASTER_HUB_URL: https://hub.farcaster.builders
      NEYNAR_API_KEY: ${NEYNAR_API_KEY}

      # Blockchain
      RPC_ENDPOINT: https://base.llamarpc.com
      TREASURE_WALLET: 0xf2b6664bf4d50800000000000000000000000000
      WALLET_PRIVATE_KEY: ${WALLET_PRIVATE_KEY}

      # Fees
      BASE_FEE: 0.2
      WIN_FEE_PERCENTAGE: 1.5

      # API Configuration
      API_BASE_URL: http://localhost:5000/api
      FRAME_URL: http://localhost:5000/frame

      # Logging
      LOG_LEVEL: INFO
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - prediction-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: prediction-market-db
    environment:
      POSTGRES_DB: prediction_market
      POSTGRES_USER: prediction_user
      POSTGRES_PASSWORD: prediction_pass
      # Logging
      POSTGRES_INITDB_ARGS: "-c log_statement=all"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U prediction_user -d prediction_market" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - prediction-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: prediction-market-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - prediction-network

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: prediction-market-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - prediction-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  prediction-network:
    driver: bridge
